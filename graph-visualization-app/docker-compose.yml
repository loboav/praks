services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-5000}:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - Seeding__Mode=${SEEDING_MODE:-None}
      - Seeding__AutoReseed=${SEEDING_AUTORESEED:-false}
    depends_on:
      - db
    restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - NODE_OPTIONS=${NODE_OPTIONS}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - backend
    restart: on-failure

  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1",
        ]
      interval: 5s
      timeout: 3s
      retries: 12
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Uncomment to initialize database with custom SQL
    #   - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

volumes:
  postgres_data:
