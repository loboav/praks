using Microsoft.EntityFrameworkCore;
using GraphVisualizationApp.Models;

namespace GraphVisualizationApp.Data
{
    /// <summary>
    /// –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (seed data)
    /// </summary>
    public static class DatabaseSeeder
    {
        /// <summary>
        /// –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ë–î –¥–∞–Ω–Ω—ã–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        /// </summary>
        public static async Task SeedAsync(GraphDbContext context, IConfiguration configuration)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–º–∏
            var seedMode = configuration["Seeding:Mode"] ?? "None";

            if (seedMode == "None")
            {
                return;
            }

            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            var autoReseed = configuration.GetValue<bool>("Seeding:AutoReseed", false);
            if (!autoReseed && await context.ObjectTypes.AnyAsync())
            {
                Console.WriteLine("Database already contains data. Skipping seed.");
                return;
            }

            Console.WriteLine($"Seeding database with template: {seedMode}");

            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ AutoReseed –≤–∫–ª—é—á–µ–Ω
            if (autoReseed)
            {
                await ClearAllDataAsync(context);
            }

            switch (seedMode.ToLower())
            {
                case "investigation":
                    await SeedInvestigationTemplateAsync(context);
                    break;
                case "business":
                    await SeedBusinessTemplateAsync(context);
                    break;
                case "it":
                    await SeedITInfrastructureTemplateAsync(context);
                    break;
                case "all":
                    await SeedInvestigationTemplateAsync(context);
                    break;
                default:
                    Console.WriteLine($"Unknown seed mode: {seedMode}");
                    break;
            }

            await context.SaveChangesAsync();
            Console.WriteLine("Database seeding completed successfully!");
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        /// </summary>
        private static async Task ClearAllDataAsync(GraphDbContext context)
        {
            Console.WriteLine("Clearing existing data...");

            context.RelationProperties.RemoveRange(context.RelationProperties);
            context.GraphRelations.RemoveRange(context.GraphRelations);
            context.ObjectProperties.RemoveRange(context.ObjectProperties);
            context.GraphObjects.RemoveRange(context.GraphObjects);
            context.RelationTypes.RemoveRange(context.RelationTypes);
            context.ObjectTypes.RemoveRange(context.ObjectTypes);
            context.GraphLayouts.RemoveRange(context.GraphLayouts);

            await context.SaveChangesAsync();
            Console.WriteLine("Data cleared successfully!");
        }

        /// <summary>
        /// –®–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (–ª—é–¥–∏, –∫–æ–º–ø–∞–Ω–∏–∏, —Å–≤—è–∑–∏)
        /// </summary>
        private static async Task SeedInvestigationTemplateAsync(GraphDbContext context)
        {
            Console.WriteLine("Seeding Investigation template...");

            // 1. –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
            var personType = new ObjectType
            {
                Name = "–ü–µ—Ä—Å–æ–Ω–∞",
                Description = "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–ë)"
            };
            var companyType = new ObjectType
            {
                Name = "–ö–æ–º–ø–∞–Ω–∏—è",
                Description = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ –†–ë)"
            };
            var documentType = new ObjectType
            {
                Name = "–î–æ–∫—É–º–µ–Ω—Ç",
                Description = "–î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç"
            };
            var eventType = new ObjectType
            {
                Name = "–°–æ–±—ã—Ç–∏–µ",
                Description = "–°–æ–±—ã—Ç–∏–µ –∏–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç"
            };
            var locationType = new ObjectType
            {
                Name = "–õ–æ–∫–∞—Ü–∏—è",
                Description = "–ú–µ—Å—Ç–æ –∏–ª–∏ –∞–¥—Ä–µ—Å"
            };

            context.ObjectTypes.AddRange(personType, companyType, documentType, eventType, locationType);
            await context.SaveChangesAsync();

            // 2. –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —Å–≤—è–∑–µ–π
            var worksForRelation = new RelationType
            {
                Name = "–†–∞–±–æ—Ç–∞–µ—Ç –≤",
                Description = "–¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
                ObjectTypeId = personType.Id
            };
            var ownsRelation = new RelationType
            {
                Name = "–í–ª–∞–¥–µ–µ—Ç",
                Description = "–û—Ç–Ω–æ—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è",
                ObjectTypeId = personType.Id
            };
            var relatedToRelation = new RelationType
            {
                Name = "–°–≤—è–∑–∞–Ω —Å",
                Description = "–û–±—â–∞—è —Å–≤—è–∑—å",
                ObjectTypeId = personType.Id
            };
            var signedRelation = new RelationType
            {
                Name = "–ü–æ–¥–ø–∏—Å–∞–ª",
                Description = "–ü–æ–¥–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                ObjectTypeId = personType.Id
            };
            var locatedAtRelation = new RelationType
            {
                Name = "–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤",
                Description = "–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                ObjectTypeId = companyType.Id
            };
            var participatedInRelation = new RelationType
            {
                Name = "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤",
                Description = "–£—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏",
                ObjectTypeId = personType.Id
            };

            context.RelationTypes.AddRange(
                worksForRelation,
                ownsRelation,
                relatedToRelation,
                signedRelation,
                locatedAtRelation,
                participatedInRelation
            );
            await context.SaveChangesAsync();

            // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ (–ø–µ—Ä—Å–æ–Ω—ã)
            var person1 = new GraphObject
            {
                Name = "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                ObjectTypeId = personType.Id,
                Properties = new List<ObjectProperty>
                {
                    new ObjectProperty { Key = "–í–æ–∑—Ä–∞—Å—Ç", Value = "45" },
                    new ObjectProperty { Key = "–î–æ–ª–∂–Ω–æ—Å—Ç—å", Value = "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä" },
                    new ObjectProperty { Key = "–£–ù–ü", Value = "123456789" }
                },
                Color = "#4CAF50",
                Icon = "üë§",
                PositionX = 200,
                PositionY = 100
            };

            var person2 = new GraphObject
            {
                Name = "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                ObjectTypeId = personType.Id,
                Properties = new List<ObjectProperty>
                {
                    new ObjectProperty { Key = "–í–æ–∑—Ä–∞—Å—Ç", Value = "38" },
                    new ObjectProperty { Key = "–î–æ–ª–∂–Ω–æ—Å—Ç—å", Value = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä" },
                    new ObjectProperty { Key = "–£–ù–ü", Value = "987654321" }
                },
                Color = "#4CAF50",
                Icon = "üë§",
                PositionX = 500,
                PositionY = 100
            };

            var person3 = new GraphObject
            {
                Name = "–ê–ª–µ–∫—Å–µ–π –ö–æ–≤–∞–ª–µ–≤",
                ObjectTypeId = personType.Id,
                Properties = new List<ObjectProperty>
                {
                    new ObjectProperty { Key = "–í–æ–∑—Ä–∞—Å—Ç", Value = "52" },
                    new ObjectProperty { Key = "–î–æ–ª–∂–Ω–æ—Å—Ç—å", Value = "–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü" },
                    new ObjectProperty { Key = "–£–ù–ü", Value = "456789123" }
                },
                Color = "#4CAF50",
                Icon = "üë§",
                PositionX = 800,
                PositionY = 100
            };

            // –ö–æ–º–ø–∞–Ω–∏–∏
            var company1 = new GraphObject
            {
                Name = "–û–û–û '–ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç'",
                ObjectTypeId = companyType.Id,
                Properties = new List<ObjectProperty>
                {
                    new ObjectProperty { Key = "–£–ù–ü", Value = "190123456" },
                    new ObjectProperty { Key = "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", Value = "2015-03-15" },
                    new ObjectProperty { Key = "–£—Å—Ç–∞–≤–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª", Value = "10000000 BYN" },
                    new ObjectProperty { Key = "–ê–¥—Ä–µ—Å", Value = "–≥. –ú–∏–Ω—Å–∫, –ø—Ä-—Ç –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, 84" }
                },
                Color = "#2196F3",
                Icon = "üè¢",
                PositionX = 350,
                PositionY = 300
            };

            var company2 = new GraphObject
            {
                Name = "–û–ê–û '–ë–µ—Ç–∞ –ì—Ä—É–ø–ø'",
                ObjectTypeId = companyType.Id,
                Properties = new List<ObjectProperty>
                {
                    new ObjectProperty { Key = "–£–ù–ü", Value = "100654321" },
                    new ObjectProperty { Key = "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", Value = "2010-07-22" },
                    new ObjectProperty { Key = "–£—Å—Ç–∞–≤–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª", Value = "50000000 BYN" },
                    new ObjectProperty { Key = "–ê–¥—Ä–µ—Å", Value = "–≥. –ú–∏–Ω—Å–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞, 17" }
                },
                Color = "#2196F3",
                Icon = "üè¢",
                PositionX = 650,
                PositionY = 300
            };

            // –î–æ–∫—É–º–µ–Ω—Ç—ã
            var document1 = new GraphObject
            {
                Name = "–ö–æ–Ω—Ç—Ä–∞–∫—Ç ‚Ññ45/2023",
                ObjectTypeId = documentType.Id,
                Properties = new List<ObjectProperty>
                {
                    new ObjectProperty { Key = "–î–∞—Ç–∞", Value = "2023-06-10" },
                    new ObjectProperty { Key = "–°—É–º–º–∞", Value = "5000000 BYN" },
                    new ObjectProperty { Key = "–°—Ç–∞—Ç—É—Å", Value = "–î–µ–π—Å—Ç–≤—É—é—â–∏–π" }
                },
                Color = "#FF9800",
                Icon = "üìÑ",
                PositionX = 500,
                PositionY = 500
            };

            // –°–æ–±—ã—Ç–∏—è
            var event1 = new GraphObject
            {
                Name = "–ó–∞—Å–µ–¥–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤",
                ObjectTypeId = eventType.Id,
                Properties = new List<ObjectProperty>
                {
                    new ObjectProperty { Key = "–î–∞—Ç–∞", Value = "2024-01-15" },
                    new ObjectProperty { Key = "–ú–µ—Å—Ç–æ", Value = "–ú–∏–Ω—Å–∫, –ë–¶ '–°—Ç–æ–ª–∏—Ü–∞'" },
                    new ObjectProperty { Key = "–¢–∏–ø", Value = "–î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞" }
                },
                Color = "#9C27B0",
                Icon = "üìÖ",
                PositionX = 200,
                PositionY = 500
            };

            // –õ–æ–∫–∞—Ü–∏–∏
            var location1 = new GraphObject
            {
                Name = "–ú–∏–Ω—Å–∫, –ø—Ä-—Ç –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ 84",
                ObjectTypeId = locationType.Id,
                Properties = new List<ObjectProperty>
                {
                    new ObjectProperty { Key = "–ê–¥—Ä–µ—Å", Value = "–≥. –ú–∏–Ω—Å–∫, –ø—Ä-—Ç –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –¥. 84" },
                    new ObjectProperty { Key = "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", Value = "53.9006,27.5590" }
                },
                Color = "#F44336",
                Icon = "üìç",
                PositionX = 350,
                PositionY = 700
            };

            context.GraphObjects.AddRange(
                person1, person2, person3,
                company1, company2,
                document1,
                event1,
                location1
            );
            await context.SaveChangesAsync();

            // 4. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
            var relations = new[]
            {
                // –ò–≤–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç
                new GraphRelation
                {
                    Source = person1.Id,
                    Target = company1.Id,
                    RelationTypeId = worksForRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–° –¥–∞—Ç—ã", Value = "2015-04-01" },
                        new RelationProperty { Key = "–ó–∞—Ä–ø–ª–∞—Ç–∞", Value = "5000 BYN" }
                    },
                    Color = "#4CAF50"
                },
                // –ú–∞—Ä–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç
                new GraphRelation
                {
                    Source = person2.Id,
                    Target = company1.Id,
                    RelationTypeId = worksForRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–° –¥–∞—Ç—ã", Value = "2016-09-15" },
                        new RelationProperty { Key = "–ó–∞—Ä–ø–ª–∞—Ç–∞", Value = "4000 BYN" }
                    },
                    Color = "#4CAF50"
                },
                // –ê–ª–µ–∫—Å–µ–π –≤–ª–∞–¥–µ–µ—Ç –ë–µ—Ç–∞ –ì—Ä—É–ø–ø
                new GraphRelation
                {
                    Source = person3.Id,
                    Target = company2.Id,
                    RelationTypeId = ownsRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–î–æ–ª—è", Value = "51%" },
                        new RelationProperty { Key = "–° –¥–∞—Ç—ã", Value = "2010-07-22" }
                    },
                    Color = "#FFC107"
                },
                // –ò–≤–∞–Ω —Å–≤—è–∑–∞–Ω —Å –ê–ª–µ–∫—Å–µ–µ–º
                new GraphRelation
                {
                    Source = person1.Id,
                    Target = person3.Id,
                    RelationTypeId = relatedToRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–¢–∏–ø —Å–≤—è–∑–∏", Value = "–î–µ–ª–æ–≤–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ" },
                        new RelationProperty { Key = "–° –≥–æ–¥–∞", Value = "2018" }
                    },
                    Color = "#9E9E9E"
                },
                // –ò–≤–∞–Ω –ø–æ–¥–ø–∏—Å–∞–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                new GraphRelation
                {
                    Source = person1.Id,
                    Target = document1.Id,
                    RelationTypeId = signedRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", Value = "2023-06-10" },
                        new RelationProperty { Key = "–†–æ–ª—å", Value = "–û—Ç –∏–º–µ–Ω–∏ –ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç" }
                    },
                    Color = "#FF9800"
                },
                // –ê–ª–µ–∫—Å–µ–π –ø–æ–¥–ø–∏—Å–∞–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                new GraphRelation
                {
                    Source = person3.Id,
                    Target = document1.Id,
                    RelationTypeId = signedRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", Value = "2023-06-10" },
                        new RelationProperty { Key = "–†–æ–ª—å", Value = "–û—Ç –∏–º–µ–Ω–∏ –ë–µ—Ç–∞ –ì—Ä—É–ø–ø" }
                    },
                    Color = "#FF9800"
                },
                // –ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ú–∏–Ω—Å–∫–µ
                new GraphRelation
                {
                    Source = company1.Id,
                    Target = location1.Id,
                    RelationTypeId = locatedAtRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–¢–∏–ø", Value = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å" }
                    },
                    Color = "#F44336"
                },
                // –ò–≤–∞–Ω —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–æ–±—ã—Ç–∏–∏
                new GraphRelation
                {
                    Source = person1.Id,
                    Target = event1.Id,
                    RelationTypeId = participatedInRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–†–æ–ª—å", Value = "–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å" }
                    },
                    Color = "#9C27B0"
                },
                // –ê–ª–µ–∫—Å–µ–π —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–æ–±—ã—Ç–∏–∏
                new GraphRelation
                {
                    Source = person3.Id,
                    Target = event1.Id,
                    RelationTypeId = participatedInRelation.Id,
                    Properties = new List<RelationProperty>
                    {
                        new RelationProperty { Key = "–†–æ–ª—å", Value = "–£—á–∞—Å—Ç–Ω–∏–∫" }
                    },
                    Color = "#9C27B0"
                }
            };

            context.GraphRelations.AddRange(relations);
            await context.SaveChangesAsync();

            Console.WriteLine($"Investigation template created (Belarus): {context.GraphObjects.Count()} objects, {context.GraphRelations.Count()} relations");
        }

        /// <summary>
        /// –®–∞–±–ª–æ–Ω –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        /// </summary>
        private static async Task SeedBusinessTemplateAsync(GraphDbContext context)
        {
            Console.WriteLine("Seeding Business template...");

            var processType = new ObjectType { Name = "–ü—Ä–æ—Ü–µ—Å—Å", Description = "–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å" };
            var taskType = new ObjectType { Name = "–ó–∞–¥–∞—á–∞", Description = "–ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ" };
            var roleType = new ObjectType { Name = "–†–æ–ª—å", Description = "–†–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" };
            var systemType = new ObjectType { Name = "–°–∏—Å—Ç–µ–º–∞", Description = "IT —Å–∏—Å—Ç–µ–º–∞" };

            context.ObjectTypes.AddRange(processType, taskType, roleType, systemType);
            await context.SaveChangesAsync();

            var nextRelation = new RelationType { Name = "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", ObjectTypeId = taskType.Id };
            var responsibleRelation = new RelationType { Name = "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", ObjectTypeId = roleType.Id };
            var usesRelation = new RelationType { Name = "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç", ObjectTypeId = taskType.Id };

            context.RelationTypes.AddRange(nextRelation, responsibleRelation, usesRelation);
            await context.SaveChangesAsync();

            var obj1 = new GraphObject { Name = "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", ObjectTypeId = taskType.Id, Color = "#4CAF50", Icon = "üì®", PositionX = 200, PositionY = 200 };
            var obj2 = new GraphObject { Name = "–û–±—Ä–∞–±–æ—Ç–∫–∞", ObjectTypeId = taskType.Id, Color = "#2196F3", Icon = "‚öôÔ∏è", PositionX = 400, PositionY = 200 };
            var obj3 = new GraphObject { Name = "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", ObjectTypeId = taskType.Id, Color = "#FF9800", Icon = "‚úÖ", PositionX = 600, PositionY = 200 };
            var obj4 = new GraphObject { Name = "–ú–µ–Ω–µ–¥–∂–µ—Ä", ObjectTypeId = roleType.Id, Color = "#9C27B0", Icon = "üëî", PositionX = 400, PositionY = 400 };
            var obj5 = new GraphObject { Name = "CRM —Å–∏—Å—Ç–µ–º–∞", ObjectTypeId = systemType.Id, Color = "#607D8B", Icon = "üíª", PositionX = 200, PositionY = 400 };

            context.GraphObjects.AddRange(obj1, obj2, obj3, obj4, obj5);
            await context.SaveChangesAsync();

            context.GraphRelations.AddRange(
                new GraphRelation { Source = obj1.Id, Target = obj2.Id, RelationTypeId = nextRelation.Id },
                new GraphRelation { Source = obj2.Id, Target = obj3.Id, RelationTypeId = nextRelation.Id },
                new GraphRelation { Source = obj4.Id, Target = obj2.Id, RelationTypeId = responsibleRelation.Id },
                new GraphRelation { Source = obj2.Id, Target = obj5.Id, RelationTypeId = usesRelation.Id }
            );
            await context.SaveChangesAsync();

            Console.WriteLine("Business template created");
        }

        /// <summary>
        /// –®–∞–±–ª–æ–Ω –¥–ª—è IT –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        /// </summary>
        private static async Task SeedITInfrastructureTemplateAsync(GraphDbContext context)
        {
            Console.WriteLine("Seeding IT Infrastructure template...");

            var serverType = new ObjectType { Name = "–°–µ—Ä–≤–µ—Ä", Description = "–§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä" };
            var serviceType = new ObjectType { Name = "–°–µ—Ä–≤–∏—Å", Description = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å" };
            var databaseType = new ObjectType { Name = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", Description = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" };
            var userType = new ObjectType { Name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", Description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã" };

            context.ObjectTypes.AddRange(serverType, serviceType, databaseType, userType);
            await context.SaveChangesAsync();

            var hostsRelation = new RelationType { Name = "–•–æ—Å—Ç–∏—Ç", ObjectTypeId = serverType.Id };
            var connectsRelation = new RelationType { Name = "–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫", ObjectTypeId = serviceType.Id };
            var accessRelation = new RelationType { Name = "–ò–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø", ObjectTypeId = userType.Id };

            context.RelationTypes.AddRange(hostsRelation, connectsRelation, accessRelation);
            await context.SaveChangesAsync();

            var server1 = new GraphObject { Name = "Web-Server-01", ObjectTypeId = serverType.Id, Color = "#607D8B", Icon = "üñ•Ô∏è", PositionX = 300, PositionY = 100 };
            var server2 = new GraphObject { Name = "DB-Server-01", ObjectTypeId = serverType.Id, Color = "#607D8B", Icon = "üñ•Ô∏è", PositionX = 500, PositionY = 100 };
            var service1 = new GraphObject { Name = "Frontend App", ObjectTypeId = serviceType.Id, Color = "#2196F3", Icon = "üåê", PositionX = 300, PositionY = 300 };
            var service2 = new GraphObject { Name = "Backend API", ObjectTypeId = serviceType.Id, Color = "#4CAF50", Icon = "‚öôÔ∏è", PositionX = 500, PositionY = 300 };
            var db1 = new GraphObject { Name = "PostgreSQL", ObjectTypeId = databaseType.Id, Color = "#FF9800", Icon = "üíæ", PositionX = 500, PositionY = 500 };
            var user1 = new GraphObject { Name = "Admin", ObjectTypeId = userType.Id, Color = "#F44336", Icon = "üë§", PositionX = 200, PositionY = 300 };

            context.GraphObjects.AddRange(server1, server2, service1, service2, db1, user1);
            await context.SaveChangesAsync();

            context.GraphRelations.AddRange(
                new GraphRelation { Source = server1.Id, Target = service1.Id, RelationTypeId = hostsRelation.Id },
                new GraphRelation { Source = server1.Id, Target = service2.Id, RelationTypeId = hostsRelation.Id },
                new GraphRelation { Source = server2.Id, Target = db1.Id, RelationTypeId = hostsRelation.Id },
                new GraphRelation { Source = service2.Id, Target = db1.Id, RelationTypeId = connectsRelation.Id },
                new GraphRelation { Source = user1.Id, Target = service1.Id, RelationTypeId = accessRelation.Id }
            );
            await context.SaveChangesAsync();

            Console.WriteLine("IT Infrastructure template created");
        }
    }
}
